# -*- coding: utf-8 -*-
"""notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h9x2KtH1-IKt-jWmRphi8_6SzQtE2at3

# Proyek Akhir: Menyelesaikan Permasalahan Perusahaan Edutech

- Nama: Eko Prabowo
- Email: 1prabowoku@gmail.com
- Id Dicoding: koekoo

## Persiapan

### Menyiapkan library yang dibutuhkan
"""

import pandas as pd
pd.set_option('display.max_columns', None)
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import MinMaxScaler, OrdinalEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import precision_score, recall_score, f1_score, confusion_matrix
from sklearn.utils import resample

from sqlalchemy import create_engine
import pickle

"""### Menyiapkan data yang akan digunakan

## Data Understanding

Pertanyaan yang akan dicari jawabannya dalan proyek ini

- Apa faktor yang menyebabkan siswa melakukan dropout?

Dataset ini memiliki keterangan seperti berikut:

- Marital status - The marital status of the student. (Categorical) 1 – single 2 – married 3 – widower 4 – divorced 5 – facto union 6 – legally separated

- Application mode - The method of application used by the student. (Categorical) 1 - 1st phase - general contingent 2 - Ordinance No. 612/93 5 - 1st phase - special contingent (Azores Island) 7 - Holders of other higher courses 10 - Ordinance No. 854-B/99 15 - International student (bachelor) 16 - 1st phase - special contingent (Madeira Island) 17 - 2nd phase - general contingent 18 - 3rd phase - general contingent 26 - Ordinance No. 533-A/99, item b2 (Different Plan) 27 - Ordinance No. 533-A/99, item b3 (Other Institution) 39 - Over 23 years old 42 - Transfer 43 - Change of course 44 - Technological specialization diploma holders 51 - Change of institution/course 53 - Short cycle diploma holders 57 - Change of institution/course (International)

- Application order	 - The order in which the student applied. (Numerical) Application order (between 0 - first choice; and 9 last choice)

- Course - The course taken by the student. (Categorical) 33 - Biofuel Production Technologies 171 - Animation and Multimedia Design 8014 - Social Service (evening attendance) 9003 - Agronomy 9070 - Communication Design 9085 - Veterinary Nursing 9119 - Informatics Engineering 9130 - Equinculture 9147 - Management 9238 - Social Service 9254 - Tourism 9500 - Nursing 9556 - Oral Hygiene 9670 - Advertising and Marketing Management 9773 - Journalism and Communication 9853 - Basic Education 9991 - Management (evening attendance)

- Daytime/evening attendance - Whether the student attends classes during the day or in the evening. (Categorical) 1 – daytime 0 - evening

- Previous qualification - The qualification obtained by the student before enrolling in higher education. (Categorical) 1 - Secondary education 2 - Higher education - bachelor's degree 3 - Higher education - degree 4 - Higher education - master's 5 - Higher education - doctorate 6 - Frequency of higher education 9 - 12th year of schooling - not completed 10 - 11th year of schooling - not completed 12 - Other - 11th year of schooling 14 - 10th year of schooling 15 - 10th year of schooling - not completed 19 - Basic education 3rd cycle (9th/10th/11th year) or equiv. 38 - Basic education 2nd cycle (6th/7th/8th year) or equiv. 39 - Technological specialization course 40 - Higher education - degree (1st cycle) 42 - Professional higher technical course 43 - Higher education - master (2nd cycle)

- Previous qualification (grade) - Grade of previous qualification (between 0 and 200)

- Nacionality - The nationality of the student. (Categorical) 1 - Portuguese; 2 - German; 6 - Spanish; 11 - Italian; 13 - Dutch; 14 - English; 17 - Lithuanian; 21 - Angolan; 22 - Cape Verdean; 24 - Guinean; 25 - Mozambican; 26 - Santomean; 32 - Turkish; 41 - Brazilian; 62 - Romanian; 100 - Moldova (Republic of); 101 - Mexican; 103 - Ukrainian; 105 - Russian; 108 - Cuban; 109 - Colombian

- Mother's qualification - The qualification of the student's mother. (Categorical) 1 - Secondary Education - 12th Year of Schooling or Eq. 2 - Higher Education - Bachelor's Degree 3 - Higher Education - Degree 4 - Higher Education - Master's 5 - Higher Education - Doctorate 6 - Frequency of Higher Education 9 - 12th Year of Schooling - Not Completed 10 - 11th Year of Schooling - Not Completed 11 - 7th Year (Old) 12 - Other - 11th Year of Schooling 14 - 10th Year of Schooling 18 - General commerce course 19 - Basic Education 3rd Cycle (9th/10th/11th Year) or Equiv. 22 - Technical-professional course 26 - 7th year of schooling 27 - 2nd cycle of the general high school course 29 - 9th Year of Schooling - Not Completed 30 - 8th year of schooling 34 - Unknown 35 - Can't read or write 36 - Can read without having a 4th year of schooling 37 - Basic education 1st cycle (4th/5th year) or equiv. 38 - Basic Education 2nd Cycle (6th/7th/8th Year) or Equiv. 39 - Technological specialization course 40 - Higher education - degree (1st cycle) 41 - Specialized higher studies course 42 - Professional higher technical course 43 - Higher Education - Master (2nd cycle) 44 - Higher Education - Doctorate (3rd cycle)

- Father's qualification - The qualification of the student's father. (Categorical) 1 - Secondary Education - 12th Year of Schooling or Eq. 2 - Higher Education - Bachelor's Degree 3 - Higher Education - Degree 4 - Higher Education - Master's 5 - Higher Education - Doctorate 6 - Frequency of Higher Education 9 - 12th Year of Schooling - Not Completed 10 - 11th Year of Schooling - Not Completed 11 - 7th Year (Old) 12 - Other - 11th Year of Schooling 13 - 2nd year complementary high school course 14 - 10th Year of Schooling 18 - General commerce course 19 - Basic Education 3rd Cycle (9th/10th/11th Year) or Equiv. 20 - Complementary High School Course 22 - Technical-professional course 25 - Complementary High School Course - not concluded 26 - 7th year of schooling 27 - 2nd cycle of the general high school course 29 - 9th Year of Schooling - Not Completed 30 - 8th year of schooling 31 - General Course of Administration and Commerce 33 - Supplementary Accounting and Administration 34 - Unknown 35 - Can't read or write 36 - Can read without having a 4th year of schooling 37 - Basic education 1st cycle (4th/5th year) or equiv. 38 - Basic Education 2nd Cycle (6th/7th/8th Year) or Equiv. 39 - Technological specialization course 40 - Higher education - degree (1st cycle) 41 - Specialized higher studies course 42 - Professional higher technical course 43 - Higher Education - Master (2nd cycle) 44 - Higher Education - Doctorate (3rd cycle)

- Mother's occupation - The occupation of the student's mother. (Categorical) 0 - Student 1 - Representatives of the Legislative Power and Executive Bodies, Directors, Directors and Executive Managers 2 - Specialists in Intellectual and Scientific Activities 3 - Intermediate Level Technicians and Professions 4 - Administrative staff 5 - Personal Services, Security and Safety Workers and Sellers 6 - Farmers and Skilled Workers in Agriculture, Fisheries and Forestry 7 - Skilled Workers in Industry, Construction and Craftsmen 8 - Installation and Machine Operators and Assembly Workers 9 - Unskilled Workers 10 - Armed Forces Professions 90 - Other Situation 99 - (blank) 122 - Health professionals 123 - teachers 125 - Specialists in information and communication technologies (ICT) 131 - Intermediate level science and engineering technicians and professions 132 - Technicians and professionals, of intermediate level of health 134 - Intermediate level technicians from legal, social, sports, cultural and similar services 141 - Office workers, secretaries in general and data processing operators 143 - Data, accounting, statistical, financial services and registry-related operators 144 - Other administrative support staff 151 - personal service workers 152 - sellers 153 - Personal care workers and the like 171 - Skilled construction workers and the like, except electricians 173 - Skilled workers in printing, precision instrument manufacturing, jewelers, artisans and the like 175 - Workers in food processing, woodworking, clothing and other industries and crafts 191 - cleaning workers 192 - Unskilled workers in agriculture, animal production, fisheries and forestry 193 - Unskilled workers in extractive industry, construction, manufacturing and transport 194 - Meal preparation assistants

- Father's occupation - The occupation of the student's father. (Categorical) 0 - Student 1 - Representatives of the Legislative Power and Executive Bodies, Directors, Directors and Executive Managers 2 - Specialists in Intellectual and Scientific Activities 3 - Intermediate Level Technicians and Professions 4 - Administrative staff 5 - Personal Services, Security and Safety Workers and Sellers 6 - Farmers and Skilled Workers in Agriculture, Fisheries and Forestry 7 - Skilled Workers in Industry, Construction and Craftsmen 8 - Installation and Machine Operators and Assembly Workers 9 - Unskilled Workers 10 - Armed Forces Professions 90 - Other Situation 99 - (blank) 101 - Armed Forces Officers 102 - Armed Forces Sergeants 103 - Other Armed Forces personnel 112 - Directors of administrative and commercial services 114 - Hotel, catering, trade and other services directors 121 - Specialists in the physical sciences, mathematics, engineering and related techniques 122 - Health professionals 123 - teachers 124 - Specialists in finance, accounting, administrative organization, public and commercial relations 131 - Intermediate level science and engineering technicians and professions 132 - Technicians and professionals, of intermediate level of health 134 - Intermediate level technicians from legal, social, sports, cultural and similar services 135 - Information and communication technology technicians 141 - Office workers, secretaries in general and data processing operators 143 - Data, accounting, statistical, financial services and registry-related operators 144 - Other administrative support staff 151 - personal service workers 152 - sellers 153 - Personal care workers and the like 154 - Protection and security services personnel 161 - Market-oriented farmers and skilled agricultural and animal production workers 163 - Farmers, livestock keepers, fishermen, hunters and gatherers, subsistence 171 - Skilled construction workers and the like, except electricians 172 - Skilled workers in metallurgy, metalworking and similar 174 - Skilled workers in electricity and electronics 175 - Workers in food processing, woodworking, clothing and other industries and crafts 181 - Fixed plant and machine operators 182 - assembly workers 183 - Vehicle drivers and mobile equipment operators 192 - Unskilled workers in agriculture, animal production, fisheries and forestry 193 - Unskilled workers in extractive industry, construction, manufacturing and transport 194 - Meal preparation assistants 195 - Street vendors (except food) and street service providers

- Admission grade - Admission grade (between 0 and 200)

- Displaced - Whether the student is a displaced person. (Categorical) 1 – yes 0 – no

- Educational special needs	 - Whether the student has any special educational needs. (Categorical) 1 – yes 0 – no

- Debtor - Whether the student is a debtor. (Categorical) 1 – yes 0 – no

- Tuition fees up to date - Whether the student's tuition fees are up to date. (Categorical) 1 – yes 0 – no

- Gender - The gender of the student. (Categorical) 1 – male 0 – female

- Scholarship holder - Whether the student is a scholarship holder. (Categorical) 1 – yes 0 – no

- Age at enrollment - The age of the student at the time of enrollment. (Numerical)

- International - Whether the student is an international student. (Categorical) 1 – yes 0 – no

- Curricular units 1st sem (credited) - The number of curricular units credited by the student in the first semester. (Numerical)

- Curricular units 1st sem (enrolled) - The number of curricular units enrolled by the student in the first semester. (Numerical)

- Curricular units 1st sem (evaluations) - The number of curricular units evaluated by the student in the first semester. (Numerical)

- Curricular units 1st sem (approved) - The number of curricular units approved by the student in the first semester. (Numerical)

## Data Preparation / Preprocessing
"""

from google.colab import drive
drive.mount('/content/drive')

# Membaca data
df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/BelajarPenerapanDataScience/Submission 2/data.csv', delimiter=';')
df.head(10)

# Mengecek data yang kosong
df.isna().sum()

# Mengecek data duplikat
df.duplicated().any()

# Membuat instance dari LabelEncoder
label_encoder = LabelEncoder()

# Menggunakan LabelEncoder untuk melakukan encoding pada target array
df['Status'] = label_encoder.fit_transform(df['Status'])

# Cetak mapping dari label ke nilai yang diencode
print("Mapping Label ke Nilai yang diencode:")
for label, value in zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_)):
    print(f"{label}: {value}")

# Cetak target array yang sudah diencode
print("\nTarget Array yang sudah diencode:")
print(df['Status'])

# Mengecek informasi data
df.info()

df.columns

df.describe(include='all')

"""Ada nilai yang kurang sesuai pada kolom Curricular_units_1st_sem_grade dan Curricular_units_2nd_sem_grade sehingga akan dihapus"""

df = df.drop(columns=['Curricular_units_1st_sem_grade', 'Curricular_units_2nd_sem_grade'])
df.describe(include='all')

# Variabel Marital_status akan dikategorikan sebagai data tipe kategori karena merupakan data nominal
df['Marital_status'].unique()

# Variabel Application_mode akan dikategorikan sebagai data tipe kategori karena merupakan data nominal
df['Application_mode'].unique()

# Variabel Application_order akan dikategorikan sebagai data tipe kategori karena merupakan data ordinal
df['Application_order'].unique()

# Variabel Course akan dikategorikan sebagai data tipe kategori karena merupakan data nominal
df['Course'].unique()

# Variabel Daytime_evening_attendance akan dikategorikan sebagai data tipe kategori karena merupakan data nominal
df['Daytime_evening_attendance'].unique()

# Variabel Previous_qualification akan dikategorikan sebagai data tipe kategori karena merupakan data nominal
df['Previous_qualification'].unique()

# Variabel Nacionality akan dikategorikan sebagai data tipe kategori karena merupakan data nominal
df['Nacionality'].unique()

# Variabel Mothers_qualification akan dikategorikan sebagai data tipe kategori karena merupakan data nominal
df['Mothers_qualification'].unique()

# Variabel Fathers_qualification akan dikategorikan sebagai data tipe kategori karena merupakan data nominal
df['Fathers_qualification'].unique()

# Variabel Mothers_occupation akan dikategorikan sebagai data tipe kategori karena merupakan data nominal
df['Mothers_occupation'].unique()

# Variabel Fathers_occupation akan dikategorikan sebagai data tipe kategori karena merupakan data nominal
df['Fathers_occupation'].unique()

# Variabel Displaced akan dikategorikan sebagai data tipe kategori karena merupakan data nominal
df['Displaced'].unique()

# Variabel Educational_special_needs akan dikategorikan sebagai data tipe kategori karena merupakan data nominal
df['Educational_special_needs'].unique()

# Variabel Debtor akan dikategorikan sebagai data tipe kategori karena merupakan data nominal
df['Debtor'].unique()

# Variabel Tuition_fees_up_to_date akan dikategorikan sebagai data tipe kategori karena merupakan data nominal
df['Tuition_fees_up_to_date'].unique()

# Variabel Gender akan dikategorikan sebagai data tipe kategori karena merupakan data nominal
df['Gender'].unique()

# Variabel Scholarship_holder akan dikategorikan sebagai data tipe kategori karena merupakan data nominal
df['Scholarship_holder'].unique()

# Variabel International akan dikategorikan sebagai data tipe kategori karena merupakan data nominal
df['International'].unique()

# Variabel Status akan dikategorikan sebagai data tipe kategori karena merupakan data ordinal
df['Status'].unique()

# Kolom yang ingin diubah menjadi tipe data yang benar
columns_to_convert = ['Marital_status', 'Application_mode', 'Application_order', 'Course',
                      'Daytime_evening_attendance', 'Previous_qualification', 'Nacionality',
                      'Mothers_qualification', 'Fathers_qualification', 'Mothers_occupation',
                      'Fathers_occupation', 'Displaced', 'Educational_special_needs', 'Debtor',
                      'Tuition_fees_up_to_date', 'Gender', 'Scholarship_holder', 'International',
                      'Status']

# Ubah tipe data kolom-kolom yang diinginkan menjadi string
df[columns_to_convert] = df[columns_to_convert].astype(str)

# Melihat info data
df.info()

"""##### Feature Engineering"""

# Melihat Rasio Unit yang Disetujui
df['Ratio_approved_1st_sem'] = df['Curricular_units_1st_sem_approved'] / df['Curricular_units_1st_sem_enrolled']
df['Ratio_approved_2nd_sem'] = df['Curricular_units_2nd_sem_approved'] / df['Curricular_units_2nd_sem_enrolled']

# Melihat deskripsi data
df.describe(include='all')

# Melihat info data
df.info()

# Mengecek data yang kosong
df.isna().sum()

# Menghapus data yang kosong
df = df.dropna()
df.isna().sum()

# Melihat info data
df.info()

"""##### Exploratory Data Analysis"""

# Melihat semua data yang memiliki tipe data kategori
categorical = df.select_dtypes(include=['object']).columns.tolist()
categorical

# Melihat plot kategori
def categorical_plot(features, df, segment_feature=None):
    fig, ax = plt.subplots(len(features), 1, figsize=(15, 50))

    # Iterasi melalui setiap feature untuk membuat plot
    for i, feature in enumerate(features):
        if segment_feature:
            # Jika ada segment_feature, plot dengan hue di subplot yang sesuai
            sns.countplot(data=df, x=feature, hue=segment_feature, ax=ax[i])
        else:
            # Jika tidak ada segment_feature, plot tanpa hue di subplot yang lain
            sns.countplot(data=df, x=feature, ax=ax[i])

        # Tambahkan teks di atas setiap bar dalam plot
        for p in ax[i].patches:
            ax[i].annotate(format(p.get_height(), '.0f'),
                           (p.get_x() + p.get_width() / 2., p.get_height()),
                           ha='center', va='center',
                           xytext=(0, 10),
                           textcoords='offset points')

    plt.tight_layout()
    plt.show()

categorical_plot(
    features=categorical,
    df=df,
    segment_feature='Status'
)

"""Terdapat data-data yang timpang sehingga tidak dapat diambil informasinya seperti Marital status, Application order, Previous qualification, Nacionality, Educational special needs, Debtor, Tuition fees up to date, dan International sehingga akan dihapus"""

df.columns

# Menghapus data yang timpang
data_hapus_categorical = ['Marital_status', 'Application_order', 'Previous_qualification', 'Nacionality',
                          'Educational_special_needs', 'Debtor', 'Tuition_fees_up_to_date', 'International',
                          'Daytime_evening_attendance']

df = df.drop(columns=data_hapus_categorical)
df.head()

# Melihat semua data yang memiliki tipe data kategori
categorical = df.select_dtypes(include=['object']).columns.tolist()
categorical

# Melihat plot kategori
def categorical_plot(features, df, segment_feature=None):
    fig, ax = plt.subplots(len(features), 1, figsize=(15, 50))

    # Iterasi melalui setiap feature untuk membuat plot
    for i, feature in enumerate(features):
        if segment_feature:
            # Jika ada segment_feature, plot dengan hue di subplot yang sesuai
            sns.countplot(data=df, x=feature, hue=segment_feature, ax=ax[i])
        else:
            # Jika tidak ada segment_feature, plot tanpa hue di subplot yang lain
            sns.countplot(data=df, x=feature, ax=ax[i])

        # Tambahkan teks di atas setiap bar dalam plot
        for p in ax[i].patches:
            ax[i].annotate(format(p.get_height(), '.0f'),
                           (p.get_x() + p.get_width() / 2., p.get_height()),
                           ha='center', va='center',
                           xytext=(0, 10),
                           textcoords='offset points')

    plt.tight_layout()
    plt.show()

categorical_plot(
    features=categorical,
    df=df,
    segment_feature='Status'
)

categorical

df['Application_mode'].value_counts()

# Melihat semua data yang memiliki tipe data numeric
numerical = df.select_dtypes(include=[np.number]).columns.tolist()
numerical

# Melihat plot numeric
def numerical_dis_plot(features, df, segment_feature=None, showfliers=True):
    fig, ax = plt.subplots(len(features), 1, figsize=(10, 50))

    for i, feature in enumerate(features):
        if segment_feature:
            sns.boxplot(y=segment_feature, x=feature, data=df, ax=ax[i], showfliers=showfliers)
            ax[i].set_ylabel(None)

            for tick, label in enumerate(ax[i].get_yticklabels()):
                cat = label.get_text()
                mean_value = df[df[segment_feature] == cat][feature].mean()
                mean_text = f'Mean: {mean_value:.1f}'
                ax[i].text(ax[i].get_xlim()[1], tick, mean_text,
                           verticalalignment='center', size='medium', color='black', weight='semibold')
        else:
            sns.boxplot(x=feature, data=df, ax=ax[i], showfliers=showfliers)
            mean_value = df[feature].mean()
            mean_text = f'Mean: {mean_value:.1f}'
            ax[i].text(ax[i].get_xlim()[1], 0, mean_text,
                       verticalalignment='center', size='medium', color='black', weight='semibold')

    plt.tight_layout()
    plt.show()

numerical_dis_plot(
    features=numerical,
    df=df,
    segment_feature='Status',
    showfliers=False
)

numerical

# Menghitung nilai unik dalam fitur
df['Curricular_units_1st_sem_without_evaluations'].value_counts()

# Menghitung nilai unik dalam fitur
df['Curricular_units_1st_sem_credited'].value_counts()

# Menghitung nilai unik dalam fitur
df['Curricular_units_2nd_sem_credited'].value_counts()

# Menghitung nilai unik dalam fitur
df['Curricular_units_2nd_sem_without_evaluations'].value_counts()

# Menghitung nilai unik dalam fitur
df['Curricular_units_2nd_sem_without_evaluations'].value_counts()

"""Terdapat data-data yang timpang sehingga tidak dapat diambil informasinya seperti Curricular_units_1st_sem_without_evaluations, Curricular_units_1st_sem_credited, Curricular_units_2nd_sem_credited, Curricular_units_2nd_sem_without_evaluations, Curricular_units_2nd_sem_without_evaluations sehingga akan dihapus"""

# Menghapus nilai numerical yang timpang
df = df.drop(columns=['Curricular_units_1st_sem_without_evaluations', 'Curricular_units_1st_sem_credited',
                      'Curricular_units_2nd_sem_credited', 'Curricular_units_2nd_sem_without_evaluations',
                      'Curricular_units_2nd_sem_without_evaluations'])
df

# Melihat semua data yang memiliki tipe data numeric
numerical = df.select_dtypes(include=[np.number]).columns.tolist()
numerical

# Melihat plot numeric
def numerical_dis_plot(features, df, segment_feature=None, showfliers=True):
    fig, ax = plt.subplots(len(features), 1, figsize=(10, 50))

    for i, feature in enumerate(features):
        if segment_feature:
            sns.boxplot(y=segment_feature, x=feature, data=df, ax=ax[i], showfliers=showfliers)
            ax[i].set_ylabel(None)

            for tick, label in enumerate(ax[i].get_yticklabels()):
                cat = label.get_text()
                mean_value = df[df[segment_feature] == cat][feature].mean()
                mean_text = f'Mean: {mean_value:.1f}'
                ax[i].text(ax[i].get_xlim()[1], tick, mean_text,
                           verticalalignment='center', size='medium', color='black', weight='semibold')
        else:
            sns.boxplot(x=feature, data=df, ax=ax[i], showfliers=showfliers)
            mean_value = df[feature].mean()
            mean_text = f'Mean: {mean_value:.1f}'
            ax[i].text(ax[i].get_xlim()[1], 0, mean_text,
                       verticalalignment='center', size='medium', color='black', weight='semibold')

    plt.tight_layout()
    plt.show()

numerical_dis_plot(
    features=numerical,
    df=df,
    segment_feature='Status',
    showfliers=False
)

"""## Modeling

Karena requestnya adalah mahasiswa akan melakukan dropout atau tidak, maka output target enrolled dan graduate akan disatukan menjadi '1' dan output target dropout akan menjadi '0'
"""

# Mengubah nilai target 1 dan 2 menjadi 1
df['Status'] = df['Status'].replace({'1': '1', '2': '1'})

print(df)

df['Status'].value_counts()

"""Karena data target saya timpang, saya akan melakukan teknik undersampling untuk target yang outputnya 1"""

# Pisahkan data menjadi dua bagian berdasarkan kelasnya
df_class_0 = df[df['Status'] == '0']
df_class_1 = df[df['Status'] == '1']

# Undersample kelas 1
df_class_1_undersampled = resample(df_class_1,
                                   replace=False,    # Tidak mengganti (sampling tanpa penggantian)
                                   n_samples=len(df_class_0), # Sesuaikan jumlahnya dengan kelas 0
                                   random_state=42)  # Untuk memastikan hasil yang konsisten

# Menggabungkan kembali data yang diundersample
df_undersampled = pd.concat([df_class_0, df_class_1_undersampled])

# Mengecek apakah target sudah setara
df_undersampled['Status'].value_counts()

# Melakukan train-test-split
X = df_undersampled.drop(columns='Status')
y = df_undersampled['Status']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train.shape, X_test.shape, y_train.shape, y_test.shape

# Melihat nilai numeric
numerical

# Menentukan nilai categorical
categorical = ['Application_mode',
 'Course',
 'Mothers_qualification',
 'Fathers_qualification',
 'Mothers_occupation',
 'Fathers_occupation',
 'Displaced',
 'Gender',
 'Scholarship_holder',]
categorical

# melakukan preprocessing
numerical_pipeline = Pipeline([
    ('imputasi', SimpleImputer(strategy='median')),
    ('scaling', MinMaxScaler())
])

ordinal_pipeline = Pipeline([
	('imputer', SimpleImputer(strategy='most_frequent')),
	('ordinal', OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1))
])

preprocessor = ColumnTransformer([
    ('preprocessing numerical', numerical_pipeline, numerical),
    ('preprocessing ordinal', ordinal_pipeline, categorical)
])

# Menentukan algoritma
algo = RandomForestClassifier()

model = Pipeline(steps=[
    ('preprocessing', preprocessor),
    ('rfc', algo)
])

model.fit(X_train, y_train)

# Prediksi menggunakan model
y_pred = model.predict(X_test)

"""## Evaluation"""

# Evaluasi model
precision = precision_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred, average='weighted')
f1 = f1_score(y_test, y_pred, average='weighted')
cm = confusion_matrix(y_test, y_pred)

# Print hasil evaluasi
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
print(f"F1-score: {f1:.2f}")
print("Confusion Matrix:")
print(cm)

# Menyimpan model
with open('model.pkl', 'wb') as model_file:
    pickle.dump(model, model_file)

"""##### Upload data"""

# Menimpan data yang sudah diolah
df.to_csv('data_submission_2.csv', index=False)

# Membaca data yang sudah diolah
df = pd.read_csv('data_submission_2.csv')
df